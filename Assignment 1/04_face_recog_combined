import cv2
import numpy as np
from PIL import Image
import os

# Variables
dataset_path = r"C:\Users\Bryan\Desktop\EE4208_DATASET"
cascade_classifier_path = r"C:\Users\Bryan\Desktop\EE4208 Assignment 1\EE4208-Assignment\Assignment 1\haarcascade_frontalface_default.xml"
model_path = r'C:\Users\Bryan\Desktop\trainer/trainer.yml'
a = 1
names = ['None']


########     Building Dataset       ########
cam = cv2.VideoCapture(0)
cam.set(3, 640) # set video width
cam.set(4, 480) # set video height

face_detector = cv2.CascadeClassifier(cascade_classifier_path)
number_of_faces = input('\n enter an integer number of faces to record and press <return> ==>  ')
print(type(number_of_faces))
int_of_faces = int(number_of_faces)
print(type(int_of_faces))


while a-1 < int_of_faces:
    # For each person, enter one face id
    face_id = input('\n enter user id end press <return> ==>  ')
    names.append(face_id)

    print("\n [INFO] Initializing face capture. Look the camera and wait ...")
    # Initialize individual sampling face count
    count = 0

    while(True):
        ret, img = cam.read()
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        faces = face_detector.detectMultiScale(gray, 1.3, 5)
        
        for (x,y,w,h) in faces:
            count = count + 1
            # Generating filepath to save the captured images into
            savefilepath = os.path.join(dataset_path, str(face_id) + "." + str(a) + "." + str(count) + ".jpg")
            print(savefilepath)
            cv2.rectangle(img, (x,y), (x+w,y+h), (255,0,0), 2)     
            

            # Save the captured image into the datasets folder
            cv2.imwrite(savefilepath, gray[y:y+h,x:x+w])

            cv2.imshow('image', img)

        k = cv2.waitKey(100) & 0xff # Press 'ESC' for exiting video
        if k == 27:
            break
        elif count >= 30: # Take 30 face sample and stop video
            break
    print("\n [INFO] Face captured. Prepare next face...")
    a += 1
    

# Do a bit of cleanup
print("Faces Captured:", names)
print("\n [INFO] Exiting Program and cleanup stuff")
cam.release()
cv2.destroyAllWindows()



########     Training on Dataset       ########
print("\n Starting training.....")

recognizer = cv2.face.LBPHFaceRecognizer_create()
detector = cv2.CascadeClassifier(cascade_classifier_path);

# function to get the images and label data
def getImagesAndLabels(dataset_path):

    imagePaths = [os.path.join(dataset_path,f) for f in os.listdir(dataset_path)]     
    faceSamples=[]
    ids = []

    for imagePath in imagePaths:

        PIL_img = Image.open(imagePath).convert('L') # convert it to grayscale
        img_numpy = np.array(PIL_img,'uint8')

        id = int(os.path.split(imagePath)[-1].split(".")[1])
        faces = detector.detectMultiScale(img_numpy)

        for (x,y,w,h) in faces:
            faceSamples.append(img_numpy[y:y+h,x:x+w])
            ids.append(id)

    return faceSamples,ids

print ("\n [INFO] Training faces. It will take a few seconds. Wait ...")
faces,ids = getImagesAndLabels(dataset_path)
recognizer.train(faces, np.array(ids))

# Save the model into trainer/trainer.yml
recognizer.save(r"C:\Users\Bryan\Desktop\trainer.yml")

# Print the numer of faces trained and end program
print("\n [INFO] {0} faces trained. Exiting Program".format(len(np.unique(ids))))



########     Running face recognition       ########
print("\n Starting face recognition.....")
recognizer = cv2.face.LBPHFaceRecognizer_create()
recognizer.read(r"C:\Users\Bryan\Desktop\trainer.yml")
cascadePath = r"C:\Users\Bryan\Desktop\EE4208 Assignment 1\EE4208-Assignment\Assignment 1\haarcascade_frontalface_default.xml"
faceCascade = cv2.CascadeClassifier(cascadePath);

font = cv2.FONT_HERSHEY_SIMPLEX

#initiate id counter
id = 0

# Initialize and start realtime video capture
cam = cv2.VideoCapture(0)
cam.set(3, 640) # set video width
cam.set(4, 480) # set video height

# Define min window size to be recognized as a face
minW = 0.1*cam.get(3)
minH = 0.1*cam.get(4)

while True:

    ret, img =cam.read()

    gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)

    faces = faceCascade.detectMultiScale( 
        gray,
        scaleFactor = 1.2,
        minNeighbors = 5,
        minSize = (int(minW), int(minH)),
    )

    for(x,y,w,h) in faces:

        cv2.rectangle(img, (x,y), (x+w,y+h), (0,255,0), 2)

        id, confidence = recognizer.predict(gray[y:y+h,x:x+w])


        # Check if confidence is less than 100 ==> "0" is perfect match 
        if (confidence < 100):
            uid = names[id]
            confidence = "  {0}%".format(round(100 - confidence))
        else:
            uid = "unknown"
            confidence = "  {0}%".format(round(100 - confidence))
            

        cv2.putText(img, str(uid), (x+5,y-5), font, 1, (255,255,255), 2)
        cv2.putText(img, str(confidence), (x+5,y+h-5), font, 1, (255,255,0), 1)

    cv2.imshow('camera',img) 

    k = cv2.waitKey(10) & 0xff # Press 'ESC' for exiting video
    if k == 27:
        break

# Do a bit of cleanup
print("\n [INFO] Exiting Program and cleanup stuff")
cam.release()
cv2.destroyAllWindows()



